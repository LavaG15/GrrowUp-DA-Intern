{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPfAB2LdZa3dTp012zUN84T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Lpl-Ww9sD5T6","executionInfo":{"status":"ok","timestamp":1724212981877,"user_tz":-330,"elapsed":2549,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sb"]},{"cell_type":"code","source":["country = pd.read_csv('Metadata_Country.csv')\n","population = pd.read_csv('country_population.csv')\n","fertility = pd.read_csv('fertility_rate.csv')\n","life = pd.read_csv('life_expectancy.csv')"],"metadata":{"id":"lmfagzYzGi_T","executionInfo":{"status":"ok","timestamp":1724213025827,"user_tz":-330,"elapsed":476,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["country.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"aXGwgLm9G0V8","executionInfo":{"status":"ok","timestamp":1724213061990,"user_tz":-330,"elapsed":759,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"719d155b-9768-4d06-8312-b22883578974"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Country Code                     Region          IncomeGroup  \\\n","0          ABW  Latin America & Caribbean          High income   \n","1          AFG                 South Asia           Low income   \n","2          AGO         Sub-Saharan Africa  Lower middle income   \n","3          ALB      Europe & Central Asia  Upper middle income   \n","4          AND      Europe & Central Asia          High income   \n","\n","                                        SpecialNotes    TableName  Unnamed: 5  \n","0  SNA data for 2000-2011 are updated from offici...        Aruba         NaN  \n","1  Fiscal year end: March 20; reporting period fo...  Afghanistan         NaN  \n","2                                                NaN       Angola         NaN  \n","3                                                NaN      Albania         NaN  \n","4  WB-3 code changed from ADO to AND to align wit...      Andorra         NaN  "],"text/html":["\n","  <div id=\"df-25460479-24b3-41f8-9975-eff17f9feb0a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Code</th>\n","      <th>Region</th>\n","      <th>IncomeGroup</th>\n","      <th>SpecialNotes</th>\n","      <th>TableName</th>\n","      <th>Unnamed: 5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ABW</td>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>High income</td>\n","      <td>SNA data for 2000-2011 are updated from offici...</td>\n","      <td>Aruba</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFG</td>\n","      <td>South Asia</td>\n","      <td>Low income</td>\n","      <td>Fiscal year end: March 20; reporting period fo...</td>\n","      <td>Afghanistan</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AGO</td>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Lower middle income</td>\n","      <td>NaN</td>\n","      <td>Angola</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ALB</td>\n","      <td>Europe &amp; Central Asia</td>\n","      <td>Upper middle income</td>\n","      <td>NaN</td>\n","      <td>Albania</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AND</td>\n","      <td>Europe &amp; Central Asia</td>\n","      <td>High income</td>\n","      <td>WB-3 code changed from ADO to AND to align wit...</td>\n","      <td>Andorra</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25460479-24b3-41f8-9975-eff17f9feb0a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-25460479-24b3-41f8-9975-eff17f9feb0a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-25460479-24b3-41f8-9975-eff17f9feb0a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8a252ff5-8fea-4ee5-8384-7e92f67d863c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a252ff5-8fea-4ee5-8384-7e92f67d863c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8a252ff5-8fea-4ee5-8384-7e92f67d863c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"country","summary":"{\n  \"name\": \"country\",\n  \"rows\": 263,\n  \"fields\": [\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"JOR\",\n          \"KHM\",\n          \"YEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IncomeGroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Low income\",\n          \"Upper middle income\",\n          \"High income\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SpecialNotes\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 134,\n        \"samples\": [\n          \"Upper middle income group aggregate. Upper-middle-income economies are those in which 2016 GNI per capita was between $3,956 and $12,235.\",\n          \"Based on IMF and World Bank Country team, GDP in current and constant prices have been revised.\",\n          \"The New Base Year is 2014.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"Jordan\",\n          \"Cambodia\",\n          \"Yemen, Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unnamed: 5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["country=country.drop(['IncomeGroup','SpecialNotes', 'Unnamed: 5'], axis=1)"],"metadata":{"id":"R8DCT1osG2dM","executionInfo":{"status":"ok","timestamp":1724213081952,"user_tz":-330,"elapsed":472,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["country = country.iloc[:, [2, 0, 1]]\n","country"],"metadata":{"id":"CXzjTphG14nJ","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1724213108346,"user_tz":-330,"elapsed":473,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"ab5eaeae-ac7a-4421-ef3d-fbd8aa1d02d7"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         Region     TableName Country Code\n","0     Latin America & Caribbean         Aruba          ABW\n","1                    South Asia   Afghanistan          AFG\n","2            Sub-Saharan Africa        Angola          AGO\n","3         Europe & Central Asia       Albania          ALB\n","4         Europe & Central Asia       Andorra          AND\n","..                          ...           ...          ...\n","258       Europe & Central Asia        Kosovo          XKX\n","259  Middle East & North Africa   Yemen, Rep.          YEM\n","260          Sub-Saharan Africa  South Africa          ZAF\n","261          Sub-Saharan Africa        Zambia          ZMB\n","262          Sub-Saharan Africa      Zimbabwe          ZWE\n","\n","[263 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-4046e190-cbf9-4371-a1ee-59ef5bfd15ab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","      <th>TableName</th>\n","      <th>Country Code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>South Asia</td>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Europe &amp; Central Asia</td>\n","      <td>Albania</td>\n","      <td>ALB</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Europe &amp; Central Asia</td>\n","      <td>Andorra</td>\n","      <td>AND</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>258</th>\n","      <td>Europe &amp; Central Asia</td>\n","      <td>Kosovo</td>\n","      <td>XKX</td>\n","    </tr>\n","    <tr>\n","      <th>259</th>\n","      <td>Middle East &amp; North Africa</td>\n","      <td>Yemen, Rep.</td>\n","      <td>YEM</td>\n","    </tr>\n","    <tr>\n","      <th>260</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>South Africa</td>\n","      <td>ZAF</td>\n","    </tr>\n","    <tr>\n","      <th>261</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zambia</td>\n","      <td>ZMB</td>\n","    </tr>\n","    <tr>\n","      <th>262</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>263 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4046e190-cbf9-4371-a1ee-59ef5bfd15ab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4046e190-cbf9-4371-a1ee-59ef5bfd15ab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4046e190-cbf9-4371-a1ee-59ef5bfd15ab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-541025b8-a425-47e9-a005-9871fa08cde3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-541025b8-a425-47e9-a005-9871fa08cde3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-541025b8-a425-47e9-a005-9871fa08cde3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_97bd5743-0d90-470d-9f6d-8a48cf74641f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('country')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_97bd5743-0d90-470d-9f6d-8a48cf74641f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('country');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"country","summary":"{\n  \"name\": \"country\",\n  \"rows\": 263,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"Jordan\",\n          \"Cambodia\",\n          \"Yemen, Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"JOR\",\n          \"KHM\",\n          \"YEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["population.shape\n","population.head()\n","population = population.drop(['Indicator Name','Indicator Code'], axis=1)\n","population"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"mB633TFqG_Hl","executionInfo":{"status":"ok","timestamp":1724213148659,"user_tz":-330,"elapsed":508,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"9702413d-dd26-41f2-f2cf-2723f2984783"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Country Name Country Code        1960        1961        1962  \\\n","0           Aruba          ABW     54211.0     55438.0     56225.0   \n","1     Afghanistan          AFG   8996351.0   9166764.0   9345868.0   \n","2          Angola          AGO   5643182.0   5753024.0   5866061.0   \n","3         Albania          ALB   1608800.0   1659800.0   1711319.0   \n","4         Andorra          AND     13411.0     14375.0     15370.0   \n","..            ...          ...         ...         ...         ...   \n","259        Kosovo          XKX    947000.0    966000.0    994000.0   \n","260   Yemen, Rep.          YEM   5172135.0   5260501.0   5351799.0   \n","261  South Africa          ZAF  17456855.0  17920673.0  18401608.0   \n","262        Zambia          ZMB   3044846.0   3140264.0   3240587.0   \n","263      Zimbabwe          ZWE   3747369.0   3870756.0   3999419.0   \n","\n","           1963        1964        1965        1966        1967  ...  \\\n","0       56695.0     57032.0     57360.0     57715.0     58055.0  ...   \n","1     9533954.0   9731361.0   9938414.0  10152331.0  10372630.0  ...   \n","2     5980417.0   6093321.0   6203299.0   6309770.0   6414995.0  ...   \n","3     1762621.0   1814135.0   1864791.0   1914573.0   1965598.0  ...   \n","4       16412.0     17469.0     18549.0     19647.0     20758.0  ...   \n","..          ...         ...         ...         ...         ...  ...   \n","259   1022000.0   1050000.0   1078000.0   1106000.0   1135000.0  ...   \n","260   5446063.0   5543339.0   5643643.0   5748588.0   5858638.0  ...   \n","261  18899275.0  19412975.0  19942303.0  20486439.0  21045785.0  ...   \n","262   3345145.0   3452942.0   3563407.0   3676189.0   3791887.0  ...   \n","263   4132756.0   4269863.0   4410212.0   4553433.0   4700041.0  ...   \n","\n","           2007        2008        2009        2010        2011        2012  \\\n","0      101220.0    101353.0    101453.0    101669.0    102053.0    102577.0   \n","1    26616792.0  27294031.0  28004331.0  28803167.0  29708599.0  30696958.0   \n","2    20997687.0  21759420.0  22549547.0  23369131.0  24218565.0  25096150.0   \n","3     2970017.0   2947314.0   2927519.0   2913021.0   2905195.0   2900401.0   \n","4       82683.0     83861.0     84462.0     84449.0     83751.0     82431.0   \n","..          ...         ...         ...         ...         ...         ...   \n","259   1733404.0   1747383.0   1761474.0   1775680.0   1791000.0   1805200.0   \n","260  21751605.0  22356391.0  22974929.0  23606779.0  24252206.0  24909969.0   \n","261  49887181.0  50412129.0  50970818.0  51584663.0  52263516.0  52998213.0   \n","262  12725974.0  13082517.0  13456417.0  13850033.0  14264756.0  14699937.0   \n","263  13329909.0  13558469.0  13810599.0  14086317.0  14386649.0  14710826.0   \n","\n","           2013        2014        2015        2016  \n","0      103187.0    103795.0    104341.0    104822.0  \n","1    31731688.0  32758020.0  33736494.0  34656032.0  \n","2    25998340.0  26920466.0  27859305.0  28813463.0  \n","3     2895092.0   2889104.0   2880703.0   2876101.0  \n","4       80788.0     79223.0     78014.0     77281.0  \n","..          ...         ...         ...         ...  \n","259   1824100.0   1821800.0   1801800.0   1816200.0  \n","260  25576322.0  26246327.0  26916207.0  27584213.0  \n","261  53767396.0  54539571.0  55291225.0  56015473.0  \n","262  15153210.0  15620974.0  16100587.0  16591390.0  \n","263  15054506.0  15411675.0  15777451.0  16150362.0  \n","\n","[264 rows x 59 columns]"],"text/html":["\n","  <div id=\"df-ad379b56-3236-4649-9ff5-44179b6230ef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1960</th>\n","      <th>1961</th>\n","      <th>1962</th>\n","      <th>1963</th>\n","      <th>1964</th>\n","      <th>1965</th>\n","      <th>1966</th>\n","      <th>1967</th>\n","      <th>...</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>54211.0</td>\n","      <td>55438.0</td>\n","      <td>56225.0</td>\n","      <td>56695.0</td>\n","      <td>57032.0</td>\n","      <td>57360.0</td>\n","      <td>57715.0</td>\n","      <td>58055.0</td>\n","      <td>...</td>\n","      <td>101220.0</td>\n","      <td>101353.0</td>\n","      <td>101453.0</td>\n","      <td>101669.0</td>\n","      <td>102053.0</td>\n","      <td>102577.0</td>\n","      <td>103187.0</td>\n","      <td>103795.0</td>\n","      <td>104341.0</td>\n","      <td>104822.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>8996351.0</td>\n","      <td>9166764.0</td>\n","      <td>9345868.0</td>\n","      <td>9533954.0</td>\n","      <td>9731361.0</td>\n","      <td>9938414.0</td>\n","      <td>10152331.0</td>\n","      <td>10372630.0</td>\n","      <td>...</td>\n","      <td>26616792.0</td>\n","      <td>27294031.0</td>\n","      <td>28004331.0</td>\n","      <td>28803167.0</td>\n","      <td>29708599.0</td>\n","      <td>30696958.0</td>\n","      <td>31731688.0</td>\n","      <td>32758020.0</td>\n","      <td>33736494.0</td>\n","      <td>34656032.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","      <td>5643182.0</td>\n","      <td>5753024.0</td>\n","      <td>5866061.0</td>\n","      <td>5980417.0</td>\n","      <td>6093321.0</td>\n","      <td>6203299.0</td>\n","      <td>6309770.0</td>\n","      <td>6414995.0</td>\n","      <td>...</td>\n","      <td>20997687.0</td>\n","      <td>21759420.0</td>\n","      <td>22549547.0</td>\n","      <td>23369131.0</td>\n","      <td>24218565.0</td>\n","      <td>25096150.0</td>\n","      <td>25998340.0</td>\n","      <td>26920466.0</td>\n","      <td>27859305.0</td>\n","      <td>28813463.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Albania</td>\n","      <td>ALB</td>\n","      <td>1608800.0</td>\n","      <td>1659800.0</td>\n","      <td>1711319.0</td>\n","      <td>1762621.0</td>\n","      <td>1814135.0</td>\n","      <td>1864791.0</td>\n","      <td>1914573.0</td>\n","      <td>1965598.0</td>\n","      <td>...</td>\n","      <td>2970017.0</td>\n","      <td>2947314.0</td>\n","      <td>2927519.0</td>\n","      <td>2913021.0</td>\n","      <td>2905195.0</td>\n","      <td>2900401.0</td>\n","      <td>2895092.0</td>\n","      <td>2889104.0</td>\n","      <td>2880703.0</td>\n","      <td>2876101.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Andorra</td>\n","      <td>AND</td>\n","      <td>13411.0</td>\n","      <td>14375.0</td>\n","      <td>15370.0</td>\n","      <td>16412.0</td>\n","      <td>17469.0</td>\n","      <td>18549.0</td>\n","      <td>19647.0</td>\n","      <td>20758.0</td>\n","      <td>...</td>\n","      <td>82683.0</td>\n","      <td>83861.0</td>\n","      <td>84462.0</td>\n","      <td>84449.0</td>\n","      <td>83751.0</td>\n","      <td>82431.0</td>\n","      <td>80788.0</td>\n","      <td>79223.0</td>\n","      <td>78014.0</td>\n","      <td>77281.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>259</th>\n","      <td>Kosovo</td>\n","      <td>XKX</td>\n","      <td>947000.0</td>\n","      <td>966000.0</td>\n","      <td>994000.0</td>\n","      <td>1022000.0</td>\n","      <td>1050000.0</td>\n","      <td>1078000.0</td>\n","      <td>1106000.0</td>\n","      <td>1135000.0</td>\n","      <td>...</td>\n","      <td>1733404.0</td>\n","      <td>1747383.0</td>\n","      <td>1761474.0</td>\n","      <td>1775680.0</td>\n","      <td>1791000.0</td>\n","      <td>1805200.0</td>\n","      <td>1824100.0</td>\n","      <td>1821800.0</td>\n","      <td>1801800.0</td>\n","      <td>1816200.0</td>\n","    </tr>\n","    <tr>\n","      <th>260</th>\n","      <td>Yemen, Rep.</td>\n","      <td>YEM</td>\n","      <td>5172135.0</td>\n","      <td>5260501.0</td>\n","      <td>5351799.0</td>\n","      <td>5446063.0</td>\n","      <td>5543339.0</td>\n","      <td>5643643.0</td>\n","      <td>5748588.0</td>\n","      <td>5858638.0</td>\n","      <td>...</td>\n","      <td>21751605.0</td>\n","      <td>22356391.0</td>\n","      <td>22974929.0</td>\n","      <td>23606779.0</td>\n","      <td>24252206.0</td>\n","      <td>24909969.0</td>\n","      <td>25576322.0</td>\n","      <td>26246327.0</td>\n","      <td>26916207.0</td>\n","      <td>27584213.0</td>\n","    </tr>\n","    <tr>\n","      <th>261</th>\n","      <td>South Africa</td>\n","      <td>ZAF</td>\n","      <td>17456855.0</td>\n","      <td>17920673.0</td>\n","      <td>18401608.0</td>\n","      <td>18899275.0</td>\n","      <td>19412975.0</td>\n","      <td>19942303.0</td>\n","      <td>20486439.0</td>\n","      <td>21045785.0</td>\n","      <td>...</td>\n","      <td>49887181.0</td>\n","      <td>50412129.0</td>\n","      <td>50970818.0</td>\n","      <td>51584663.0</td>\n","      <td>52263516.0</td>\n","      <td>52998213.0</td>\n","      <td>53767396.0</td>\n","      <td>54539571.0</td>\n","      <td>55291225.0</td>\n","      <td>56015473.0</td>\n","    </tr>\n","    <tr>\n","      <th>262</th>\n","      <td>Zambia</td>\n","      <td>ZMB</td>\n","      <td>3044846.0</td>\n","      <td>3140264.0</td>\n","      <td>3240587.0</td>\n","      <td>3345145.0</td>\n","      <td>3452942.0</td>\n","      <td>3563407.0</td>\n","      <td>3676189.0</td>\n","      <td>3791887.0</td>\n","      <td>...</td>\n","      <td>12725974.0</td>\n","      <td>13082517.0</td>\n","      <td>13456417.0</td>\n","      <td>13850033.0</td>\n","      <td>14264756.0</td>\n","      <td>14699937.0</td>\n","      <td>15153210.0</td>\n","      <td>15620974.0</td>\n","      <td>16100587.0</td>\n","      <td>16591390.0</td>\n","    </tr>\n","    <tr>\n","      <th>263</th>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>3747369.0</td>\n","      <td>3870756.0</td>\n","      <td>3999419.0</td>\n","      <td>4132756.0</td>\n","      <td>4269863.0</td>\n","      <td>4410212.0</td>\n","      <td>4553433.0</td>\n","      <td>4700041.0</td>\n","      <td>...</td>\n","      <td>13329909.0</td>\n","      <td>13558469.0</td>\n","      <td>13810599.0</td>\n","      <td>14086317.0</td>\n","      <td>14386649.0</td>\n","      <td>14710826.0</td>\n","      <td>15054506.0</td>\n","      <td>15411675.0</td>\n","      <td>15777451.0</td>\n","      <td>16150362.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>264 rows × 59 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad379b56-3236-4649-9ff5-44179b6230ef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad379b56-3236-4649-9ff5-44179b6230ef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad379b56-3236-4649-9ff5-44179b6230ef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fa38ce0e-c02e-4872-9f99-7f9325f3ea43\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa38ce0e-c02e-4872-9f99-7f9325f3ea43')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fa38ce0e-c02e-4872-9f99-7f9325f3ea43 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4e109b6a-1849-40d8-ba7b-fe41aa4896a4\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('population')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4e109b6a-1849-40d8-ba7b-fe41aa4896a4 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('population');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"population"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["year = [str(i) for i in range(1960,2017)]\n","year\n","\n","melt= pd.melt(population, id_vars='Country Code', value_vars=year, var_name='Year', value_name='Population')\n","melt.head(10)\n","melt.shape\n","fd = pd.merge(country, melt, how = 'left', on = 'Country Code')\n","fd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"3CpPHsZtHOCZ","executionInfo":{"status":"ok","timestamp":1724213219123,"user_tz":-330,"elapsed":463,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"b3119b7a-c37e-4ca0-9e34-27b72fd2ed1d"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          Region TableName Country Code  Year  Population\n","0      Latin America & Caribbean     Aruba          ABW  1960     54211.0\n","1      Latin America & Caribbean     Aruba          ABW  1961     55438.0\n","2      Latin America & Caribbean     Aruba          ABW  1962     56225.0\n","3      Latin America & Caribbean     Aruba          ABW  1963     56695.0\n","4      Latin America & Caribbean     Aruba          ABW  1964     57032.0\n","...                          ...       ...          ...   ...         ...\n","14986         Sub-Saharan Africa  Zimbabwe          ZWE  2012  14710826.0\n","14987         Sub-Saharan Africa  Zimbabwe          ZWE  2013  15054506.0\n","14988         Sub-Saharan Africa  Zimbabwe          ZWE  2014  15411675.0\n","14989         Sub-Saharan Africa  Zimbabwe          ZWE  2015  15777451.0\n","14990         Sub-Saharan Africa  Zimbabwe          ZWE  2016  16150362.0\n","\n","[14991 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-e11020d3-9ed7-48f5-a8f8-1f61ac180dbb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","      <th>TableName</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Population</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1960</td>\n","      <td>54211.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1961</td>\n","      <td>55438.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1962</td>\n","      <td>56225.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1963</td>\n","      <td>56695.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1964</td>\n","      <td>57032.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14986</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>2012</td>\n","      <td>14710826.0</td>\n","    </tr>\n","    <tr>\n","      <th>14987</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>2013</td>\n","      <td>15054506.0</td>\n","    </tr>\n","    <tr>\n","      <th>14988</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>2014</td>\n","      <td>15411675.0</td>\n","    </tr>\n","    <tr>\n","      <th>14989</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>2015</td>\n","      <td>15777451.0</td>\n","    </tr>\n","    <tr>\n","      <th>14990</th>\n","      <td>Sub-Saharan Africa</td>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>2016</td>\n","      <td>16150362.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14991 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e11020d3-9ed7-48f5-a8f8-1f61ac180dbb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e11020d3-9ed7-48f5-a8f8-1f61ac180dbb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e11020d3-9ed7-48f5-a8f8-1f61ac180dbb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ebb66e8d-8f30-4d39-a0ed-701896d7b88e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ebb66e8d-8f30-4d39-a0ed-701896d7b88e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ebb66e8d-8f30-4d39-a0ed-701896d7b88e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_13f6ee37-36f7-4864-98e3-783df3367ff5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fd')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_13f6ee37-36f7-4864-98e3-783df3367ff5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('fd');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fd","summary":"{\n  \"name\": \"fd\",\n  \"rows\": 14991,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"Jordan\",\n          \"Cambodia\",\n          \"Yemen, Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"JOR\",\n          \"KHM\",\n          \"YEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 57,\n        \"samples\": [\n          \"1960\",\n          \"1965\",\n          \"1990\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 676282048.0721185,\n        \"min\": 4279.0,\n        \"max\": 7444027227.0,\n        \"num_unique_values\": 14700,\n        \"samples\": [\n          616969.0,\n          9729717.0,\n          7127822.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["\n","melt1 = pd.melt(fertility, id_vars = 'Country Code', value_vars= year, var_name = 'Year', value_name = 'fertility_rate')\n","melt1\n","fd = pd.merge(fd, melt1, how = 'left', on = ['Country Code','Year'])\n","fd.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":748},"id":"Q1H5SBLVHd3C","executionInfo":{"status":"ok","timestamp":1724213420628,"user_tz":-330,"elapsed":534,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"5e598194-1704-431f-ca67-d6339b854120"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Region TableName Country Code  Year  Population  \\\n","0  Latin America & Caribbean     Aruba          ABW  1960     54211.0   \n","1  Latin America & Caribbean     Aruba          ABW  1961     55438.0   \n","2  Latin America & Caribbean     Aruba          ABW  1962     56225.0   \n","3  Latin America & Caribbean     Aruba          ABW  1963     56695.0   \n","4  Latin America & Caribbean     Aruba          ABW  1964     57032.0   \n","5  Latin America & Caribbean     Aruba          ABW  1965     57360.0   \n","6  Latin America & Caribbean     Aruba          ABW  1966     57715.0   \n","7  Latin America & Caribbean     Aruba          ABW  1967     58055.0   \n","8  Latin America & Caribbean     Aruba          ABW  1968     58386.0   \n","9  Latin America & Caribbean     Aruba          ABW  1969     58726.0   \n","\n","   fertility_rate_x  fertility_rate_y  \n","0             4.820             4.820  \n","1             4.655             4.655  \n","2             4.471             4.471  \n","3             4.271             4.271  \n","4             4.059             4.059  \n","5             3.842             3.842  \n","6             3.625             3.625  \n","7             3.417             3.417  \n","8             3.226             3.226  \n","9             3.054             3.054  "],"text/html":["\n","  <div id=\"df-e9668b71-fd42-4d1e-be20-0bbd84e8eef4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","      <th>TableName</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Population</th>\n","      <th>fertility_rate_x</th>\n","      <th>fertility_rate_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1960</td>\n","      <td>54211.0</td>\n","      <td>4.820</td>\n","      <td>4.820</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1961</td>\n","      <td>55438.0</td>\n","      <td>4.655</td>\n","      <td>4.655</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1962</td>\n","      <td>56225.0</td>\n","      <td>4.471</td>\n","      <td>4.471</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1963</td>\n","      <td>56695.0</td>\n","      <td>4.271</td>\n","      <td>4.271</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1964</td>\n","      <td>57032.0</td>\n","      <td>4.059</td>\n","      <td>4.059</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1965</td>\n","      <td>57360.0</td>\n","      <td>3.842</td>\n","      <td>3.842</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1966</td>\n","      <td>57715.0</td>\n","      <td>3.625</td>\n","      <td>3.625</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1967</td>\n","      <td>58055.0</td>\n","      <td>3.417</td>\n","      <td>3.417</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1968</td>\n","      <td>58386.0</td>\n","      <td>3.226</td>\n","      <td>3.226</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1969</td>\n","      <td>58726.0</td>\n","      <td>3.054</td>\n","      <td>3.054</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9668b71-fd42-4d1e-be20-0bbd84e8eef4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e9668b71-fd42-4d1e-be20-0bbd84e8eef4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e9668b71-fd42-4d1e-be20-0bbd84e8eef4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c9147a61-2816-4388-a72e-9171899857ba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9147a61-2816-4388-a72e-9171899857ba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c9147a61-2816-4388-a72e-9171899857ba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fd","summary":"{\n  \"name\": \"fd\",\n  \"rows\": 14991,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"Jordan\",\n          \"Cambodia\",\n          \"Yemen, Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"JOR\",\n          \"KHM\",\n          \"YEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 57,\n        \"samples\": [\n          \"1960\",\n          \"1965\",\n          \"1990\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 676282048.0721185,\n        \"min\": 4279.0,\n        \"max\": 7444027227.0,\n        \"num_unique_values\": 14700,\n        \"samples\": [\n          616969.0,\n          9729717.0,\n          7127822.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fertility_rate_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9840813017569607,\n        \"min\": 0.827,\n        \"max\": 8.866,\n        \"num_unique_values\": 7371,\n        \"samples\": [\n          6.092792636458,\n          1.866,\n          5.7567630850257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fertility_rate_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9840813017569607,\n        \"min\": 0.827,\n        \"max\": 8.866,\n        \"num_unique_values\": 7371,\n        \"samples\": [\n          6.092792636458,\n          1.866,\n          5.7567630850257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["life = life.drop(['Indicator Name','Indicator Code'], axis=1)\n","life"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"gIQt8uhtIQmf","executionInfo":{"status":"ok","timestamp":1724213440955,"user_tz":-330,"elapsed":811,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"8fb24542-5dec-4889-e693-2673d1f817d7"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Country Name Country Code    1960    1961    1962    1963    1964  \\\n","0           Aruba          ABW  65.662  66.074  66.444  66.787  67.113   \n","1     Afghanistan          AFG  32.292  32.742  33.185  33.624  34.060   \n","2          Angola          AGO  33.251  33.573  33.914  34.272  34.645   \n","3         Albania          ALB  62.279  63.298  64.187  64.911  65.461   \n","4         Andorra          AND     NaN     NaN     NaN     NaN     NaN   \n","..            ...          ...     ...     ...     ...     ...     ...   \n","259        Kosovo          XKX     NaN     NaN     NaN     NaN     NaN   \n","260   Yemen, Rep.          YEM  34.361  34.471  34.739  35.187  35.815   \n","261  South Africa          ZAF  52.215  52.559  52.894  53.229  53.571   \n","262        Zambia          ZMB  45.124  45.502  45.869  46.225  46.574   \n","263      Zimbabwe          ZWE  51.565  51.938  52.300  52.651  52.993   \n","\n","       1965    1966    1967  ...       2007       2008      2009    2010  \\\n","0    67.435  67.762  68.095  ...  74.576000  74.725000  74.87200  75.016   \n","1    34.495  34.928  35.361  ...  59.694000  60.243000  60.75400  61.226   \n","2    35.031  35.426  35.828  ...  55.096000  56.189000  57.23100  58.192   \n","3    65.848  66.108  66.302  ...  75.656000  75.943000  76.28100  76.652   \n","4       NaN     NaN     NaN  ...        NaN        NaN       NaN     NaN   \n","..      ...     ...     ...  ...        ...        ...       ...     ...   \n","259     NaN     NaN     NaN  ...  69.197561  69.397561  69.64878  69.900   \n","260  36.597  37.488  38.427  ...  62.552000  62.888000  63.20800  63.508   \n","261  53.926  54.301  54.691  ...  53.010000  53.720000  54.70100  55.888   \n","262  46.929  47.302  47.701  ...  52.313000  53.749000  55.19400  56.588   \n","263  53.325  53.648  53.965  ...  47.719000  49.337000  51.12200  52.975   \n","\n","         2011       2012       2013       2014       2015       2016  \n","0    75.15800  75.299000  75.440000  75.582000  75.725000  75.867000  \n","1    61.66600  62.086000  62.494000  62.895000  63.288000  63.673000  \n","2    59.04200  59.770000  60.373000  60.858000  61.241000  61.547000  \n","3    77.03100  77.389000  77.702000  77.963000  78.174000  78.345000  \n","4         NaN        NaN        NaN        NaN        NaN        NaN  \n","..        ...        ...        ...        ...        ...        ...  \n","259  70.14878  70.497561  70.797561  71.097561  71.346341  71.646341  \n","260  63.78600  64.046000  64.291000  64.523000  64.743000  64.953000  \n","261  57.20100  58.545000  59.830000  60.993000  61.981000  62.774000  \n","262  57.87200  59.011000  59.982000  60.775000  61.397000  61.874000  \n","263  54.80000  56.516000  58.053000  59.360000  60.398000  61.163000  \n","\n","[264 rows x 59 columns]"],"text/html":["\n","  <div id=\"df-9be510ed-9cc6-4cb1-a0d1-0956bfb54f7b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Name</th>\n","      <th>Country Code</th>\n","      <th>1960</th>\n","      <th>1961</th>\n","      <th>1962</th>\n","      <th>1963</th>\n","      <th>1964</th>\n","      <th>1965</th>\n","      <th>1966</th>\n","      <th>1967</th>\n","      <th>...</th>\n","      <th>2007</th>\n","      <th>2008</th>\n","      <th>2009</th>\n","      <th>2010</th>\n","      <th>2011</th>\n","      <th>2012</th>\n","      <th>2013</th>\n","      <th>2014</th>\n","      <th>2015</th>\n","      <th>2016</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>65.662</td>\n","      <td>66.074</td>\n","      <td>66.444</td>\n","      <td>66.787</td>\n","      <td>67.113</td>\n","      <td>67.435</td>\n","      <td>67.762</td>\n","      <td>68.095</td>\n","      <td>...</td>\n","      <td>74.576000</td>\n","      <td>74.725000</td>\n","      <td>74.87200</td>\n","      <td>75.016</td>\n","      <td>75.15800</td>\n","      <td>75.299000</td>\n","      <td>75.440000</td>\n","      <td>75.582000</td>\n","      <td>75.725000</td>\n","      <td>75.867000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>32.292</td>\n","      <td>32.742</td>\n","      <td>33.185</td>\n","      <td>33.624</td>\n","      <td>34.060</td>\n","      <td>34.495</td>\n","      <td>34.928</td>\n","      <td>35.361</td>\n","      <td>...</td>\n","      <td>59.694000</td>\n","      <td>60.243000</td>\n","      <td>60.75400</td>\n","      <td>61.226</td>\n","      <td>61.66600</td>\n","      <td>62.086000</td>\n","      <td>62.494000</td>\n","      <td>62.895000</td>\n","      <td>63.288000</td>\n","      <td>63.673000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","      <td>33.251</td>\n","      <td>33.573</td>\n","      <td>33.914</td>\n","      <td>34.272</td>\n","      <td>34.645</td>\n","      <td>35.031</td>\n","      <td>35.426</td>\n","      <td>35.828</td>\n","      <td>...</td>\n","      <td>55.096000</td>\n","      <td>56.189000</td>\n","      <td>57.23100</td>\n","      <td>58.192</td>\n","      <td>59.04200</td>\n","      <td>59.770000</td>\n","      <td>60.373000</td>\n","      <td>60.858000</td>\n","      <td>61.241000</td>\n","      <td>61.547000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Albania</td>\n","      <td>ALB</td>\n","      <td>62.279</td>\n","      <td>63.298</td>\n","      <td>64.187</td>\n","      <td>64.911</td>\n","      <td>65.461</td>\n","      <td>65.848</td>\n","      <td>66.108</td>\n","      <td>66.302</td>\n","      <td>...</td>\n","      <td>75.656000</td>\n","      <td>75.943000</td>\n","      <td>76.28100</td>\n","      <td>76.652</td>\n","      <td>77.03100</td>\n","      <td>77.389000</td>\n","      <td>77.702000</td>\n","      <td>77.963000</td>\n","      <td>78.174000</td>\n","      <td>78.345000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Andorra</td>\n","      <td>AND</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>259</th>\n","      <td>Kosovo</td>\n","      <td>XKX</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>69.197561</td>\n","      <td>69.397561</td>\n","      <td>69.64878</td>\n","      <td>69.900</td>\n","      <td>70.14878</td>\n","      <td>70.497561</td>\n","      <td>70.797561</td>\n","      <td>71.097561</td>\n","      <td>71.346341</td>\n","      <td>71.646341</td>\n","    </tr>\n","    <tr>\n","      <th>260</th>\n","      <td>Yemen, Rep.</td>\n","      <td>YEM</td>\n","      <td>34.361</td>\n","      <td>34.471</td>\n","      <td>34.739</td>\n","      <td>35.187</td>\n","      <td>35.815</td>\n","      <td>36.597</td>\n","      <td>37.488</td>\n","      <td>38.427</td>\n","      <td>...</td>\n","      <td>62.552000</td>\n","      <td>62.888000</td>\n","      <td>63.20800</td>\n","      <td>63.508</td>\n","      <td>63.78600</td>\n","      <td>64.046000</td>\n","      <td>64.291000</td>\n","      <td>64.523000</td>\n","      <td>64.743000</td>\n","      <td>64.953000</td>\n","    </tr>\n","    <tr>\n","      <th>261</th>\n","      <td>South Africa</td>\n","      <td>ZAF</td>\n","      <td>52.215</td>\n","      <td>52.559</td>\n","      <td>52.894</td>\n","      <td>53.229</td>\n","      <td>53.571</td>\n","      <td>53.926</td>\n","      <td>54.301</td>\n","      <td>54.691</td>\n","      <td>...</td>\n","      <td>53.010000</td>\n","      <td>53.720000</td>\n","      <td>54.70100</td>\n","      <td>55.888</td>\n","      <td>57.20100</td>\n","      <td>58.545000</td>\n","      <td>59.830000</td>\n","      <td>60.993000</td>\n","      <td>61.981000</td>\n","      <td>62.774000</td>\n","    </tr>\n","    <tr>\n","      <th>262</th>\n","      <td>Zambia</td>\n","      <td>ZMB</td>\n","      <td>45.124</td>\n","      <td>45.502</td>\n","      <td>45.869</td>\n","      <td>46.225</td>\n","      <td>46.574</td>\n","      <td>46.929</td>\n","      <td>47.302</td>\n","      <td>47.701</td>\n","      <td>...</td>\n","      <td>52.313000</td>\n","      <td>53.749000</td>\n","      <td>55.19400</td>\n","      <td>56.588</td>\n","      <td>57.87200</td>\n","      <td>59.011000</td>\n","      <td>59.982000</td>\n","      <td>60.775000</td>\n","      <td>61.397000</td>\n","      <td>61.874000</td>\n","    </tr>\n","    <tr>\n","      <th>263</th>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>51.565</td>\n","      <td>51.938</td>\n","      <td>52.300</td>\n","      <td>52.651</td>\n","      <td>52.993</td>\n","      <td>53.325</td>\n","      <td>53.648</td>\n","      <td>53.965</td>\n","      <td>...</td>\n","      <td>47.719000</td>\n","      <td>49.337000</td>\n","      <td>51.12200</td>\n","      <td>52.975</td>\n","      <td>54.80000</td>\n","      <td>56.516000</td>\n","      <td>58.053000</td>\n","      <td>59.360000</td>\n","      <td>60.398000</td>\n","      <td>61.163000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>264 rows × 59 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9be510ed-9cc6-4cb1-a0d1-0956bfb54f7b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9be510ed-9cc6-4cb1-a0d1-0956bfb54f7b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9be510ed-9cc6-4cb1-a0d1-0956bfb54f7b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-34ef0382-f04c-4ce8-a57a-6db22cad1403\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34ef0382-f04c-4ce8-a57a-6db22cad1403')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-34ef0382-f04c-4ce8-a57a-6db22cad1403 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_387815ec-223f-4d10-95ae-ea4517adf8e8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('life')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_387815ec-223f-4d10-95ae-ea4517adf8e8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('life');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"life"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["\n","melt2 = pd.melt(life, id_vars = 'Country Code', value_vars= year, var_name = 'Year', value_name = 'Life_Expectancy')\n","melt2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"y6inMEWbITT_","executionInfo":{"status":"ok","timestamp":1724213475733,"user_tz":-330,"elapsed":490,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"7c1f77c7-4f56-434d-df1b-38ac68641bfe"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Country Code  Year  Life_Expectancy\n","0              ABW  1960        65.662000\n","1              AFG  1960        32.292000\n","2              AGO  1960        33.251000\n","3              ALB  1960        62.279000\n","4              AND  1960              NaN\n","...            ...   ...              ...\n","15043          XKX  2016        71.646341\n","15044          YEM  2016        64.953000\n","15045          ZAF  2016        62.774000\n","15046          ZMB  2016        61.874000\n","15047          ZWE  2016        61.163000\n","\n","[15048 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-eb9e3800-9344-436c-97dd-f3c0520253ae\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Life_Expectancy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ABW</td>\n","      <td>1960</td>\n","      <td>65.662000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFG</td>\n","      <td>1960</td>\n","      <td>32.292000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AGO</td>\n","      <td>1960</td>\n","      <td>33.251000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ALB</td>\n","      <td>1960</td>\n","      <td>62.279000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AND</td>\n","      <td>1960</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>15043</th>\n","      <td>XKX</td>\n","      <td>2016</td>\n","      <td>71.646341</td>\n","    </tr>\n","    <tr>\n","      <th>15044</th>\n","      <td>YEM</td>\n","      <td>2016</td>\n","      <td>64.953000</td>\n","    </tr>\n","    <tr>\n","      <th>15045</th>\n","      <td>ZAF</td>\n","      <td>2016</td>\n","      <td>62.774000</td>\n","    </tr>\n","    <tr>\n","      <th>15046</th>\n","      <td>ZMB</td>\n","      <td>2016</td>\n","      <td>61.874000</td>\n","    </tr>\n","    <tr>\n","      <th>15047</th>\n","      <td>ZWE</td>\n","      <td>2016</td>\n","      <td>61.163000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>15048 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb9e3800-9344-436c-97dd-f3c0520253ae')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eb9e3800-9344-436c-97dd-f3c0520253ae button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eb9e3800-9344-436c-97dd-f3c0520253ae');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0e332617-f5f5-4f85-989b-bd315510992c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e332617-f5f5-4f85-989b-bd315510992c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0e332617-f5f5-4f85-989b-bd315510992c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_6b4cb828-70fd-4564-894e-28d3e0742dc9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('melt2')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_6b4cb828-70fd-4564-894e-28d3e0742dc9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('melt2');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"melt2","summary":"{\n  \"name\": \"melt2\",\n  \"rows\": 15048,\n  \"fields\": [\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 264,\n        \"samples\": [\n          \"ESP\",\n          \"PSE\",\n          \"GIB\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 57,\n        \"samples\": [\n          \"1960\",\n          \"1965\",\n          \"1990\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life_Expectancy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.166328168815161,\n        \"min\": 18.907,\n        \"max\": 85.4170731707317,\n        \"num_unique_values\": 12557,\n        \"samples\": [\n          69.66,\n          52.4240620140062,\n          60.408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["fd = pd.merge(fd,melt2, how='left', on = ['Country Code', 'Year'])\n","fd.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":748},"id":"BFZGkcIEIcwE","executionInfo":{"status":"ok","timestamp":1724213583102,"user_tz":-330,"elapsed":686,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"5d41ae49-ec1d-4a79-a2c4-8b552a6e1933"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Region TableName Country Code  Year  Population  \\\n","0  Latin America & Caribbean     Aruba          ABW  1960     54211.0   \n","1  Latin America & Caribbean     Aruba          ABW  1961     55438.0   \n","2  Latin America & Caribbean     Aruba          ABW  1962     56225.0   \n","3  Latin America & Caribbean     Aruba          ABW  1963     56695.0   \n","4  Latin America & Caribbean     Aruba          ABW  1964     57032.0   \n","5  Latin America & Caribbean     Aruba          ABW  1965     57360.0   \n","6  Latin America & Caribbean     Aruba          ABW  1966     57715.0   \n","7  Latin America & Caribbean     Aruba          ABW  1967     58055.0   \n","8  Latin America & Caribbean     Aruba          ABW  1968     58386.0   \n","9  Latin America & Caribbean     Aruba          ABW  1969     58726.0   \n","\n","   fertility_rate_x  fertility_rate_y  Life_Expectancy_x  Life_Expectancy_y  \n","0             4.820             4.820             65.662             65.662  \n","1             4.655             4.655             66.074             66.074  \n","2             4.471             4.471             66.444             66.444  \n","3             4.271             4.271             66.787             66.787  \n","4             4.059             4.059             67.113             67.113  \n","5             3.842             3.842             67.435             67.435  \n","6             3.625             3.625             67.762             67.762  \n","7             3.417             3.417             68.095             68.095  \n","8             3.226             3.226             68.436             68.436  \n","9             3.054             3.054             68.784             68.784  "],"text/html":["\n","  <div id=\"df-03ac3a8f-26f2-4efd-9162-0c98a1622f13\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","      <th>TableName</th>\n","      <th>Country Code</th>\n","      <th>Year</th>\n","      <th>Population</th>\n","      <th>fertility_rate_x</th>\n","      <th>fertility_rate_y</th>\n","      <th>Life_Expectancy_x</th>\n","      <th>Life_Expectancy_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1960</td>\n","      <td>54211.0</td>\n","      <td>4.820</td>\n","      <td>4.820</td>\n","      <td>65.662</td>\n","      <td>65.662</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1961</td>\n","      <td>55438.0</td>\n","      <td>4.655</td>\n","      <td>4.655</td>\n","      <td>66.074</td>\n","      <td>66.074</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1962</td>\n","      <td>56225.0</td>\n","      <td>4.471</td>\n","      <td>4.471</td>\n","      <td>66.444</td>\n","      <td>66.444</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1963</td>\n","      <td>56695.0</td>\n","      <td>4.271</td>\n","      <td>4.271</td>\n","      <td>66.787</td>\n","      <td>66.787</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1964</td>\n","      <td>57032.0</td>\n","      <td>4.059</td>\n","      <td>4.059</td>\n","      <td>67.113</td>\n","      <td>67.113</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1965</td>\n","      <td>57360.0</td>\n","      <td>3.842</td>\n","      <td>3.842</td>\n","      <td>67.435</td>\n","      <td>67.435</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1966</td>\n","      <td>57715.0</td>\n","      <td>3.625</td>\n","      <td>3.625</td>\n","      <td>67.762</td>\n","      <td>67.762</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1967</td>\n","      <td>58055.0</td>\n","      <td>3.417</td>\n","      <td>3.417</td>\n","      <td>68.095</td>\n","      <td>68.095</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1968</td>\n","      <td>58386.0</td>\n","      <td>3.226</td>\n","      <td>3.226</td>\n","      <td>68.436</td>\n","      <td>68.436</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Latin America &amp; Caribbean</td>\n","      <td>Aruba</td>\n","      <td>ABW</td>\n","      <td>1969</td>\n","      <td>58726.0</td>\n","      <td>3.054</td>\n","      <td>3.054</td>\n","      <td>68.784</td>\n","      <td>68.784</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03ac3a8f-26f2-4efd-9162-0c98a1622f13')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-03ac3a8f-26f2-4efd-9162-0c98a1622f13 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-03ac3a8f-26f2-4efd-9162-0c98a1622f13');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4ead6707-3c87-400e-bb49-331f2afa7a1c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ead6707-3c87-400e-bb49-331f2afa7a1c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4ead6707-3c87-400e-bb49-331f2afa7a1c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fd","summary":"{\n  \"name\": \"fd\",\n  \"rows\": 14991,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Latin America & Caribbean\",\n          \"South Asia\",\n          \"East Asia & Pacific\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TableName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"Jordan\",\n          \"Cambodia\",\n          \"Yemen, Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 263,\n        \"samples\": [\n          \"JOR\",\n          \"KHM\",\n          \"YEM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 57,\n        \"samples\": [\n          \"1960\",\n          \"1965\",\n          \"1990\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 676282048.0721185,\n        \"min\": 4279.0,\n        \"max\": 7444027227.0,\n        \"num_unique_values\": 14700,\n        \"samples\": [\n          616969.0,\n          9729717.0,\n          7127822.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fertility_rate_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9840813017569607,\n        \"min\": 0.827,\n        \"max\": 8.866,\n        \"num_unique_values\": 7371,\n        \"samples\": [\n          6.092792636458,\n          1.866,\n          5.7567630850257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fertility_rate_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9840813017569607,\n        \"min\": 0.827,\n        \"max\": 8.866,\n        \"num_unique_values\": 7371,\n        \"samples\": [\n          6.092792636458,\n          1.866,\n          5.7567630850257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life_Expectancy_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.166328168815161,\n        \"min\": 18.907,\n        \"max\": 85.4170731707317,\n        \"num_unique_values\": 12557,\n        \"samples\": [\n          78.5707317073171,\n          47.207,\n          72.3714973554048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life_Expectancy_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.166328168815161,\n        \"min\": 18.907,\n        \"max\": 85.4170731707317,\n        \"num_unique_values\": 12557,\n        \"samples\": [\n          78.5707317073171,\n          47.207,\n          72.3714973554048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["**DATA CLEANING AND VISUALIZING**"],"metadata":{"id":"qRUlWIeyJPen"}},{"cell_type":"code","source":["fd.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OiYGz7b_JWAc","executionInfo":{"status":"ok","timestamp":1724213727358,"user_tz":-330,"elapsed":487,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"43d0ca07-0af4-47f5-c6cb-28ec3a7f87fb"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["fd.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"PID03viYJbbl","executionInfo":{"status":"ok","timestamp":1724213743813,"user_tz":-330,"elapsed":490,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"a6ab01d6-e363-42d6-af9d-4d85e2908b77"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Region               2622\n","TableName               0\n","Country Code            0\n","Year                    0\n","Population            106\n","fertility_rate_x     1221\n","fertility_rate_y     1221\n","Life_Expectancy_x    1244\n","Life_Expectancy_y    1244\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Region</th>\n","      <td>2622</td>\n","    </tr>\n","    <tr>\n","      <th>TableName</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Country Code</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Population</th>\n","      <td>106</td>\n","    </tr>\n","    <tr>\n","      <th>fertility_rate_x</th>\n","      <td>1221</td>\n","    </tr>\n","    <tr>\n","      <th>fertility_rate_y</th>\n","      <td>1221</td>\n","    </tr>\n","    <tr>\n","      <th>Life_Expectancy_x</th>\n","      <td>1244</td>\n","    </tr>\n","    <tr>\n","      <th>Life_Expectancy_y</th>\n","      <td>1244</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["len(fd['Region'][fd['Region'].notna()].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3UzTLeWgJcaB","executionInfo":{"status":"ok","timestamp":1724213754113,"user_tz":-330,"elapsed":4,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"9f02a208-8b51-4140-ff46-f1ab29e9d094"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["print('The Regions are:')\n","fd['Region'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nAPFRQeNJhCf","executionInfo":{"status":"ok","timestamp":1724213785939,"user_tz":-330,"elapsed":491,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"f1c55487-c5f4-4f70-eb1c-aedc65a9223e"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["The Regions are:\n"]},{"output_type":"execute_result","data":{"text/plain":["array(['Latin America & Caribbean', 'South Asia', 'Sub-Saharan Africa',\n","       'Europe & Central Asia', nan, 'Middle East & North Africa',\n","       'East Asia & Pacific', 'North America'], dtype=object)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["fd['Region'] = fd['Region'].fillna('Europe & Central Asia')\n","fd.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"Dn69-YV4JoER","executionInfo":{"status":"ok","timestamp":1724213816343,"user_tz":-330,"elapsed":911,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"5ebae578-6243-45d6-a3ff-9f06e2cc915d"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Region                  0\n","TableName               0\n","Country Code            0\n","Year                    0\n","Population            106\n","fertility_rate_x     1221\n","fertility_rate_y     1221\n","Life_Expectancy_x    1244\n","Life_Expectancy_y    1244\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Region</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TableName</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Country Code</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Population</th>\n","      <td>106</td>\n","    </tr>\n","    <tr>\n","      <th>fertility_rate_x</th>\n","      <td>1221</td>\n","    </tr>\n","    <tr>\n","      <th>fertility_rate_y</th>\n","      <td>1221</td>\n","    </tr>\n","    <tr>\n","      <th>Life_Expectancy_x</th>\n","      <td>1244</td>\n","    </tr>\n","    <tr>\n","      <th>Life_Expectancy_y</th>\n","      <td>1244</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["**VISUALISATION**"],"metadata":{"id":"Gcn-YyiLJ4PN"}},{"cell_type":"code","source":["import plotly.express as px\n","pd.set_option('display.float_format', lambda x: '%.2f' % x)"],"metadata":{"id":"_s8JS2eEJwpX","executionInfo":{"status":"ok","timestamp":1724213889634,"user_tz":-330,"elapsed":554,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# create the scatter chart using Plotly Express\n","fig_fertility_expectation_region = px.scatter(data_frame=fd,\n","                 x='fertility_rate',               # x-axis consists of fertility rate\n","                 y='Life_Expectancy',              # y-axis consists of life expectancy\n","                 size='Population',                # bubble size based on population\n","                 size_max=60,                      # set the maximum size for bubbles\n","                 #hover_name='Country Code',        # will view country names on hovering\n","                 color='Region',                   # will color accordingly to region\n","                 animation_frame='Year',           # will animate in time frame\n","                 animation_group='Country Code',   # animation format\n","                 template='plotly_dark',           # black as template\n","                 labels={'Region': 'Region'},      # standardize the label\n","                 range_x=[0, 20],                  # range of x axis\n","                 range_y=[10, 100])                 # range of y axis\n","\n","fig_fertility_expectation_region.update_layout(title='fertility_rate vs Life_Expectancy',        # title of graph\n","                  xaxis_title='fertility_rate',  # x axis label\n","                  yaxis_title='Life_Expectancy_Rate')           # y axis label\n","\n","fig_fertility_expectation_region.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"collapsed":true,"id":"N_oUlZYmKBdv","executionInfo":{"status":"error","timestamp":1724213909949,"user_tz":-330,"elapsed":501,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"f63a0ab9-12cc-4bd1-b26f-3e54b3828f81"},"execution_count":33,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Region', 'TableName', 'Country Code', 'Year', 'Population', 'fertility_rate_x', 'fertility_rate_y', 'Life_Expectancy_x', 'Life_Expectancy_y'] but received: fertility_rate","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-01b12937e21b>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# create the scatter chart using Plotly Express\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m fig_fertility_expectation_region = px.scatter(data_frame=fd,\n\u001b[0m\u001b[1;32m      3\u001b[0m                  \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'fertility_rate'\u001b[0m\u001b[0;34m,\u001b[0m               \u001b[0;31m# x-axis consists of fertility rate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                  \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Life_Expectancy'\u001b[0m\u001b[0;34m,\u001b[0m              \u001b[0;31m# y-axis consists of life expectancy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                  \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Population'\u001b[0m\u001b[0;34m,\u001b[0m                \u001b[0;31m# bubble size based on population\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/plotly/express/_chart_types.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0mmark\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0mD\u001b[0m \u001b[0mspace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \"\"\"\n\u001b[0;32m---> 66\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmake_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlocals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mScatter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   2001\u001b[0m     \u001b[0mapply_default_cascade\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2002\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2003\u001b[0;31m     \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstructor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2004\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mconstructor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTreemap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSunburst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIcicle\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"path\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2005\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_dataframe_hierarchy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1410\u001b[0m     \u001b[0;31m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1412\u001b[0;31m     df_output, wide_id_vars = process_args_into_dataframe(\n\u001b[0m\u001b[1;32m   1413\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwide_mode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvar_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1414\u001b[0m     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/plotly/express/_core.py\u001b[0m in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1206\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0margument\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"index\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1207\u001b[0m                             \u001b[0merr_msg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"\\n To use the index, pass it in directly as `df.index`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1208\u001b[0;31m                         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1209\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0mlength\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_input\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margument\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlength\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1210\u001b[0m                     raise ValueError(\n","\u001b[0;31mValueError\u001b[0m: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Region', 'TableName', 'Country Code', 'Year', 'Population', 'fertility_rate_x', 'fertility_rate_y', 'Life_Expectancy_x', 'Life_Expectancy_y'] but received: fertility_rate"]}]},{"cell_type":"code","source":["# plotting Line Chart\n","years = fd['Year']\n","population = fd['Population']\n","\n","# Plotting the data\n","plt.figure(figsize=(10, 6))  # Adjust size of the figure as needed\n","plt.plot(years, population, linestyle='-', color='b', label='Population Trends')\n","\n","# Add labels and title\n","plt.xlabel('Year')\n","plt.ylabel('Population')\n","plt.title('Population Trends Over Years')\n","plt.grid(True)\n","\n","# Add legend\n","plt.legend()\n","\n","# Show plot\n","plt.tight_layout()  # Ensures all elements fit nicely in the plot area\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"92_ii_XrKZBq","executionInfo":{"status":"ok","timestamp":1724214018842,"user_tz":-330,"elapsed":2185,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"0da70798-fdcc-4e15-9da2-1993e98a7980"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Region Vs Life Expectancy Rate\n","plt.figure(figsize=(12, 8))\n","sb.barplot(x='Region', y='Life_Expectancy', data=fd, color='y')\n","plt.xlabel('Region')\n","plt.ylabel('Average Life Expectancy')\n","plt.title('Average Life Expectancy by Region')\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"collapsed":true,"id":"cPEfqtzhKjae","executionInfo":{"status":"error","timestamp":1724214066758,"user_tz":-330,"elapsed":1003,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"e5a17e08-32a7-4742-ea0d-bd9afcdf0826"},"execution_count":41,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Could not interpret value `Life_Expectancy` for `y`. An entry with this name does not appear in `data`.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-ba3e5cbbf532>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Region Vs Life Expectancy Rate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbarplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Region'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Life_Expectancy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Region'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Average Life Expectancy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mbarplot\u001b[0;34m(data, x, y, hue, order, hue_order, estimator, errorbar, n_boot, seed, units, weights, orient, color, palette, saturation, fill, hue_norm, width, dodge, gap, log_scale, native_scale, formatter, legend, capsize, err_kws, ci, errcolor, errwidth, ax, **kwargs)\u001b[0m\n\u001b[1;32m   2338\u001b[0m         \u001b[0mestimator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"size\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2339\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2340\u001b[0;31m     p = _CategoricalAggPlotter(\n\u001b[0m\u001b[1;32m   2341\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2342\u001b[0m         \u001b[0mvariables\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0munits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables, order, orient, require_numeric, color, legend)\u001b[0m\n\u001b[1;32m     64\u001b[0m     ):\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;31m# This method takes care of some bookkeeping that is necessary because the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    632\u001b[0m         \u001b[0;31m# information for numeric axes would be information about log scales.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    633\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_var_ordered\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"y\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m}\u001b[0m  \u001b[0;31m# alt., used DefaultDict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 634\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    635\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    636\u001b[0m         \u001b[0;31m# TODO Lots of tests assume that these are called to initialize the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/_base.py\u001b[0m in \u001b[0;36massign_variables\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    677\u001b[0m             \u001b[0;31m# to centralize / standardize data consumption logic.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_format\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"long\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 679\u001b[0;31m             \u001b[0mplot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPlotData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    680\u001b[0m             \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    681\u001b[0m             \u001b[0mnames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/_core/data.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhandle_data_source\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m         \u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_assign_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/_core/data.py\u001b[0m in \u001b[0;36m_assign_variables\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    230\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m                     \u001b[0merr\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"An entry with this name does not appear in `data`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Could not interpret value `Life_Expectancy` for `y`. An entry with this name does not appear in `data`."]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["# Region Vs Population\n","plt.figure(figsize=(10, 8))\n","sb.barplot(x='Region', y='Population', data=fd, color='y')\n","plt.xlabel('Region')\n","plt.ylabel('Population')\n","plt.title('Population Vs Region')\n","plt.xticks(rotation=50)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":570},"id":"j3agWWSSKtUb","executionInfo":{"status":"ok","timestamp":1724214106505,"user_tz":-330,"elapsed":1242,"user":{"displayName":"2027 LAVANYA GAYATHRI","userId":"17311098300175334222"}},"outputId":"53afd79e-cac6-4dd9-f0e1-5ed6e855592c"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}